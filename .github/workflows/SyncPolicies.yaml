name: Sync Upstream Policies
on:
  workflow_dispatch:
  schedule:
    - cron: "37 14 15 * *"

permissions:
  contents: read

jobs:
  alz:
    name: ALZ Policies
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    defaults:
      run:
        shell: pwsh
    env:
      PAC_DEFINITIONS_FOLDER: ./Definitions
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: refs/heads/alz-policies

      - name: Get Latest Release
        id: latest
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Getting latest Enterprise Scale release');
            const latest = await github.rest.repos.getLatestRelease({
              owner: 'Azure',
              repo: 'Enterprise-Scale',
            });
            const latestTag = latest.data.tag_name;
            console.log(`Latest ALZ policies date: ${latestTag}`);
            core.setOutput('latest', latestTag);

      - name: Get Current Release
        id: current
        env:
          LatestTag: ${{ steps.latest.outputs.latest }}
        run: |
          $Current = Get-Content -Path './policy-versions.json'
                   | ConvertFrom-Json
                   | Select-Object -ExpandProperty alz
          Write-Host "Current policies date: $Current"
          Write-Host "CurrentTag=$Current" >> $env:GITHUB_OUTPUT

          # Determine if the latest release is newer than the current release
          if ([DateTime]$env:LatestTag -gt [DateTime]$Current) {
            Write-Host 'New version available'
            'UpdatePolicies=true' | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            Write-Host 'No new version'
            'UpdatePolicies=false' | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Update to Latest ALZ Policies
        id: update
        if: >
          steps.current.outcome == 'success' &&
          fromJSON(steps.current.outputs.UpdatePolicies)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          Latest: ${{ steps.latest.outputs.latest }}
        run: |
          # Install the EPAC module
          Install-Module -Name EnterprisePolicyAsCode -Force -AllowClobber -Scope CurrentUser

          # Download the latest ALZ policies
          Sync-ALZPolicies -GithubRelease latest -DefinitionsRootFolder $env:PAC_DEFINITIONS_FOLDER
          git add $env:PAC_DEFINITIONS_FOLDER

          # Check if there are any policy changes
          if (git diff --staged --quiet) {
            Write-Host 'No changes detected'
            'changes=false' | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            Write-Host 'Changes detected'
            'PolicyUpdates=true' | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

          # Update the policyDates file
          $PolicyVersions = Get-Content -Path './policy-versions.json'
                          | ConvertFrom-Json
          $PolicyVersions.alz = $env
          $PolicyVersions | ConvertTo-Json
                          | Set-Content -Path './policy-versions.json' -Force
          git add policy-versions.json

          # Configure git
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          # Stage changes and check if policies are updated
          git commit -m "Update to Enterprise Scale release $ReleaseTag"
          git push origin alz-policies

      - name: Create Pull Request
        uses: actions/github-script@v7
        if: >
          steps.update.outcome == 'success' &&
          fromJSON(steps.update.outputs.PolicyUpdates)
        env:
          latest: ${{ steps.latest.outputs.latest }}
        with:
          script: |
            console.log('Looking for existing Pull Requests');
            const { repo, owner } = context.repo;
            const pulls = await github.rest.pulls.list({
              owner: owner,
              repo: repo,
              head: 'refs/heads/alz-policies',
              base: 'main',
              state: 'open',
            });
            console.log(`Found ${pulls.data.length} existing pull requests`);

            if (pulls.data.length < 1) {
              console.log('Creating Pull Request');
              await github.rest.pulls.create({
                owner: owner,
                repo: repo,
                head: 'refs/heads/alz-policies',
                base: 'main',
                title: `Update ALZ policies to ${process.env.latest} release`,
                body: `Updated to ${process.env.latest} release`,
              });
            } else {
              const existingPR = pulls.data[0];
              await github.rest.pulls.update({
                owner: owner,
                repo: repo,
                pull_number: existingPR.number,
                title: `Update ALZ policies to ${process.env.latest} release`,
                body: [
                  `Updated to ${process.env.latest} release`,
                  existingPR.body,
                ].join('\n\n'),
              });
            }

  amba:
    name: AMBA Policies
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    defaults:
      run:
        shell: pwsh
    env:
      PAC_DEFINITIONS_FOLDER: ./Definitions
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: refs/heads/amba-policies

      - name: Get Latest Commit Date
        id: latest
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Getting latest AMBA commit date');
            const latest = await github.rest.repos.getCommit({
              owner: 'anwather',
              repo: 'amba-export',
              ref : 'main',
            });
            const commitDate = latest.data.commit.author.date.split('T')[0];
            console.log(`Latest ALZ policies date: ${commitDate}`);
            core.setOutput('latest', commitDate);

      - name: Get Current Release
        id: current
        env:
          Latest: ${{ steps.latest.outputs.latest }}
        run: |
          $Current = Get-Content -Path './policy-versions.json'
                   | ConvertFrom-Json
                   | Select-Object -ExpandProperty amba
          Write-Host "Current policies date: $Current"
          Write-Host "CurrentTag=$Current" >> $env:GITHUB_OUTPUT

          # Determine if the latest release is newer than the current release
          if ([DateTime]$env:Latest -gt [DateTime]$Current) {
            Write-Host 'New version available'
            'UpdatePolicies=true' | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            Write-Host 'No new version'
            'UpdatePolicies=false' | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Update to Latest Policies
        id: update
        if: >
          steps.current.outcome == 'success' &&
          fromJSON(steps.current.outputs.UpdatePolicies)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          Latest: ${{ steps.latest.outputs.latest }}
        run: |
          # Download the latest AMBA policies
          $ZipFile = Join-Path ([System.IO.Path]::GetTempPath()) 'amba-export.zip'
          $ExtractDir = Join-Path ([System.IO.Path]::GetTempPath()) 'amba-export-main'

          Invoke-WebRequest -Uri "https://github.com/anwather/amba-export/archive/refs/heads/main.zip" -Headers @{ Authorization = "Bearer $env:GITHUB_TOKEN" } -OutFile $ZipFile
          Expand-Archive -Path $ZipFile -DestinationPath ([System.IO.Path]::GetTempPath()) -Force

          # Clear the existing AMBA folders
          $paDir = Join-Path $env:PAC_DEFINITIONS_FOLDER 'policyAssignments/AMBA'
          $pdDir = Join-Path $env:PAC_DEFINITIONS_FOLDER 'policyDefinitions/AMBA'
          $psdDir = Join-Path $env:PAC_DEFINITIONS_FOLDER 'policySetDefinitions/AMBA'

          Remove-Item -Path $paDir -Recurse -Force
          Remove-Item -Path $pdDir -Recurse -Force
          Remove-Item -Path $psdDir -Recurse -Force

          New-Item -Path $paDir -ItemType Directory
          New-Item -Path $pdDir -ItemType Directory
          New-Item -Path $psdDir -ItemType Directory

          # Move the AMBA policies to the correct folder
          Move-Item -Path (Join-Path $ExtractDir 'Definitions/policyAssignments/*') -Destination $paDir -Force
          Move-Item -Path (Join-Path $ExtractDir 'Definitions/policyDefinitions/*') -Destination $pdDir -Force
          Move-Item -Path (Join-Path $ExtractDir 'Definitions/policySetDefinitions/*') -Destination $psdDir -Force

          # Check if there are any policy changes
          git add $env:PAC_DEFINITIONS_FOLDER
          if (git diff --staged --quiet) {
            Write-Host 'No changes detected'
            'changes=false' | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            Write-Host 'Changes detected'
            'PolicyUpdates=true' | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

          # Update the policyDates file
          $PolicyVersions = Get-Content -Path './policy-versions.json'
                          | ConvertFrom-Json
          $PolicyVersions.amba = $env:Latest
          $PolicyVersions | ConvertTo-Json
                          | Set-Content -Path './policy-versions.json' -Force
          git add policy-versions.json

          # Configure git
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          # Stage changes and check if policies are updated
          git commit -m "Update to AMBA Export $ReleaseTag"
          git push origin amba-policies

      - name: Create Pull Request
        uses: actions/github-script@v7
        if: >
          steps.update.outcome == 'success' &&
          fromJSON(steps.update.outputs.PolicyUpdates)
        env:
          latest: ${{ steps.latest.outputs.latest }}
        with:
          script: |
            console.log('Looking for existing Pull Requests');
            const { repo, owner } = context.repo;
            const pulls = await github.rest.pulls.list({
              owner: owner,
              repo: repo,
              head: 'refs/heads/alz-policies',
              base: 'main',
              state: 'open',
            });
            console.log(`Found ${pulls.data.length} existing pull requests`);

            if (pulls.data.length < 1) {
              console.log('Creating Pull Request');
              await github.rest.pulls.create({
                owner: owner,
                repo: repo,
                head: 'refs/heads/alz-policies',
                base: 'main',
                title: `Update AMBA policies to ${process.env.latest} release`,
                body: `Updated to ${process.env.latest} release`,
              });
            } else {
              const existingPR = pulls.data[0];
              await github.rest.pulls.update({
                owner: owner,
                repo: repo,
                pull_number: existingPR.number,
                title: `Update AMBA policies to ${process.env.latest} release`,
                body: [
                  `Updated to ${process.env.latest} release`,
                  existingPR.body,
                ].join('\n\n'),
              });
            }
